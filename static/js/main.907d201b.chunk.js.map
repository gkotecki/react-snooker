{"version":3,"sources":["common/GameObject.ts","common/Ball.ts","common/Collision.ts","common/Hole.ts","App.tsx","reportWebVitals.js","index.js"],"names":["GameObject","position","x","y","vx","vy","isColliding","this","context","console","warn","secondsPassed","Ball","velocity","color","showLogs","outOfBounds","radius","log","Math","abs","ctx","fillStyle","beginPath","arc","PI","fill","Collision","x1","y1","r1","x2","y2","r2","Hole","App","canvasRef","useRef","whiteBall","blueBalls","holes","useEffect","oldTimeStamp","gameLoop","timeStamp","current","getContext","fps","round","remove","update","forEach","ball","updateState","gameObjects","i","ball1","hole","onHole","absorption","j","length","ball2","onBalls","vCollision","distance","sqrt","vCollisionNorm","vRelativeVelocity","speed","detectCollisions","clearRect","font","fillText","fillRect","draw","drawCanvas","requestAnimationFrame","ref","onClick","event","canvas","clientX","offsetLeft","clientY","offsetTop","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.907d201b.chunk.js","sourcesContent":["import { CanvasPosition } from \"./Types\";\n\n/**\n * Generic game object\n */\nexport class GameObject {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  isColliding: boolean;\n\n  constructor(position: CanvasPosition) {\n    this.x = position[0];\n    this.y = position[1];\n\n    this.isColliding = false;\n  }\n\n  public draw(context: CanvasRenderingContext2D): void {\n    console.warn('TODO: implement this method on inheritance');\n  }\n\n  public update(secondsPassed: number): void {\n    console.warn('TODO: implement this method on inheritance');\n  }\n}\n","import { GameObject } from \"./GameObject\";\nimport { CanvasPosition, Velocity } from \"./Types\";\n\n/**\n * Ball entity\n */\nexport class Ball extends GameObject {\n  vx: number;\n  vy: number;\n  color: string;\n  outOfBounds = false;\n  showLogs = false;\n  readonly radius = 12;\n\n  constructor(position: CanvasPosition, velocity: Velocity, color: string, showLogs?: boolean) {\n    super(position);\n    this.vx = velocity[0];\n    this.vy = velocity[1];\n    this.color = color;\n    this.showLogs = showLogs;\n  }\n\n  update(secondsPassed: number) {\n    const decay = 0.5;\n    const velocityThreshold = 0.5;\n\n    if (this.showLogs) {\n      console.log(this.vx, this.vy)\n    }\n\n    this.vx = Math.abs(this.vx) < velocityThreshold\n      ? 0\n      : this.vx - this.vx * decay * secondsPassed;\n\n    this.vy = Math.abs(this.vy) < velocityThreshold\n      ? 0\n      : this.vy - this.vy * decay * secondsPassed;\n\n    this.x += this.vx * secondsPassed;\n    this.y += this.vy * secondsPassed;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = this.isColliding ? \"#f00\" : this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, 2*Math.PI);\n    ctx.fill();\n  }\n}\n","import { Ball } from \"./Ball\";\nimport { Hole } from \"./Hole\";\n\nexport class Collision {\n  /**\n   * Checks for collision between two balls\n   *\n   * Calculates the distance between the two circles.\n   * When the distance is smaller or equal to the sum\n   * of the two radius, the circles touch or overlap\n   *\n   * @param ball1 - Ball object\n   * @param ball2 - Ball object\n   *\n   * @returns collision state\n   */\n  static onBalls(\n    { x: x1, y: y1, radius: r1 }: Ball,\n    { x: x2, y: y2, radius: r2 }: Ball\n  ): boolean {\n    const squareDistance = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    return squareDistance <= (r1 + r2) * (r1 + r2);\n  }\n\n  /**\n   * Checks if a ball center is inside a hole area\n   *\n   * @param ball - Ball object\n   * @param hole - Hole object\n   *\n   * @returns out-of-bounds state\n   */\n  static onHole(\n    { x: x1, y: y1 }: Ball,\n    { x: x2, y: y2, radius: r2 }: Hole\n  ): boolean {\n    const squareDistance = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    return squareDistance < r2 * r2;\n  }\n}\n","import { GameObject } from \"./GameObject\";\n\n/**\n * Hole entity\n */\nexport class Hole extends GameObject {\n  readonly radius = 18;\n\n  update() {}\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = \"#000\";\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, 2*Math.PI);\n    ctx.fill();\n  }\n}\n","import { remove } from \"lodash\";\nimport React, { useEffect, useRef } from \"react\";\nimport { Ball } from \"./common/Ball\";\nimport { Collision } from \"./common/Collision\";\nimport { Hole } from \"./common/Hole\";\n\nfunction App() {\n  // React canvas element reference\n  const canvasRef = useRef(null);\n\n  // Initializing game entities\n  const whiteBall = new Ball([280,550], [0,0], \"#fff\");\n  const blueBalls = [\n    new Ball([170 + 26*1,150], [0,0], \"#22f\"),\n    new Ball([170 + 26*2,150], [0,0], \"#22f\"),\n    new Ball([170 + 26*3,150], [0,0], \"#22f\"),\n    new Ball([170 + 26*4,150], [0,0], \"#22f\"),\n    new Ball([170 + 26*5,150], [0,0], \"#22f\"),\n    new Ball([183 + 26*1,172], [0,0], \"#22f\"),\n    new Ball([183 + 26*2,172], [0,0], \"#22f\"),\n    new Ball([183 + 26*3,172], [0,0], \"#22f\"),\n    new Ball([183 + 26*4,172], [0,0], \"#22f\"),\n    new Ball([196 + 26*1,194], [0,0], \"#22f\"),\n    new Ball([196 + 26*2,194], [0,0], \"#22f\"),\n    new Ball([196 + 26*3,194], [0,0], \"#22f\"),\n    new Ball([209 + 26*1,216], [0,0], \"#22f\"),\n    new Ball([209 + 26*2,216], [0,0], \"#22f\"),\n    new Ball([222 + 26*1,238], [0,0], \"#22f\"),\n  ];\n  const holes = [\n    new Hole([55, 55]),\n    new Hole([445, 55]),\n    new Hole([50, 350]),\n    new Hole([450, 350]),\n    new Hole([55, 645]),\n    new Hole([445, 645]),\n  ]\n\n  /**\n   * React update hook\n   */\n  useEffect(() => {\n    // Set parameters to be reused within hook state\n    let secondsPassed = 0;\n    let oldTimeStamp = 0;\n\n    // Start game loop\n    const gameLoop = (timeStamp) => {\n      const ctx: CanvasRenderingContext2D = canvasRef.current.getContext(\"2d\");\n\n      // Calculate the number of seconds passed since the last frame\n      secondsPassed = (timeStamp - oldTimeStamp) / 1000;\n      oldTimeStamp = timeStamp;\n      const fps = Math.round(1 / secondsPassed);\n\n      // Calls game lifecycle functions\n      updateState(secondsPassed || 0);\n      detectCollisions();\n      drawCanvas(ctx, fps);\n\n      requestAnimationFrame(gameLoop);\n    };\n    gameLoop(console.timeStamp);\n  });\n\n  /**\n   * Updates game state to prepare for next draw cycle\n   */\n  function updateState(secondsPassed: number): void {\n    // Remove out-of-bounds balls from stack\n    remove(blueBalls, ({ outOfBounds }) => outOfBounds)\n\n    // Calls update on every entity\n    whiteBall.update(secondsPassed);\n    blueBalls.forEach((ball) => ball.update(secondsPassed));\n  }\n\n  /**\n   * Detects collisions between all entities\n   */\n  function detectCollisions(): void {\n    const gameObjects: Ball[] = [whiteBall, ...blueBalls];\n\n    // Loop between all entities to check for individual collision\n    for (let i = 0; i < gameObjects.length; i++) {\n      let ball1: Ball = gameObjects[i];\n      ball1.isColliding = false;\n\n      // Checks if the ball reached a hole\n      holes.forEach((hole) => {\n        if (Collision.onHole(ball1, hole)) {\n          ball1.outOfBounds = true;\n        }\n      });\n\n      const absorption = 0.8;\n\n      // Check for wall hits left and right\n      if (ball1.x < 50 + ball1.radius) {\n        ball1.isColliding = true;\n        ball1.vx = Math.abs(ball1.vx) * absorption;\n      } else if (ball1.x > 450 - ball1.radius) {\n        ball1.isColliding = true;\n        ball1.vx = -Math.abs(ball1.vx) * absorption;\n      }\n\n      // Check for wall hits bottom and top\n      if (ball1.y < 50 + ball1.radius) {\n        ball1.isColliding = true;\n        ball1.vy = Math.abs(ball1.vy) * absorption;\n      } else if (ball1.y > 650 - ball1.radius) {\n        ball1.isColliding = true;\n        ball1.vy = -Math.abs(ball1.vy) * absorption;\n      }\n\n      // Iterates over all possible ball pairs\n      for (let j = i + 1; j < gameObjects.length; j++) {\n        let ball2: Ball = gameObjects[j];\n        ball2.isColliding = false;\n\n        if (Collision.onBalls(ball1, ball2)) {\n          ball1.isColliding = true;\n          ball2.isColliding = true;\n\n          let vCollision = { x: ball2.x - ball1.x, y: ball2.y - ball1.y };\n          let distance = Math.sqrt(\n            (ball2.x - ball1.x) * (ball2.x - ball1.x) +\n              (ball2.y - ball1.y) * (ball2.y - ball1.y)\n          );\n          let vCollisionNorm = { x: vCollision.x / distance, y: vCollision.y / distance, };\n          let vRelativeVelocity = { x: ball1.vx - ball2.vx, y: ball1.vy - ball2.vy, };\n          let speed =\n            vRelativeVelocity.x * vCollisionNorm.x +\n            vRelativeVelocity.y * vCollisionNorm.y;\n\n          if (speed < 0) {\n            break;\n          }\n\n          ball1.vx -= speed * vCollisionNorm.x;\n          ball1.vy -= speed * vCollisionNorm.y;\n          ball2.vx += speed * vCollisionNorm.x;\n          ball2.vy += speed * vCollisionNorm.y;\n        }\n      }\n    }\n  }\n\n  /**\n   * Clears previous frames and draws new content\n   */\n  function drawCanvas(ctx: CanvasRenderingContext2D, fps: number): void {\n    // Clears previous frame\n    ctx.clearRect(0, 0, 500, 700);\n\n    // Draw FPS string\n    ctx.font = \"14px monospace\";\n    ctx.fillStyle = \"#000\";\n    ctx.fillText(\"FPS: \" + fps, 0, 11);\n\n    // Draw billiards table\n    ctx.fillStyle = \"#420\";\n    ctx.fillRect(25, 25, 450, 650);\n    ctx.fillStyle = \"#090\";\n    ctx.fillRect(50, 50, 400, 600);\n\n    //Draw holes\n    holes.forEach((hole) => hole.draw(ctx));\n\n    // Draw balls\n    whiteBall.draw(ctx);\n    blueBalls.forEach((ball) => ball.draw(ctx));\n  }\n\n  /**\n   * Mouse click event handler\n   *\n   * @param event - mouse click event\n   */\n  function mouseClick(event: React.MouseEvent<HTMLCanvasElement, MouseEvent>): void {\n    const canvas: HTMLElement = canvasRef.current;\n    const factor = 3;\n    whiteBall.vx = ((event.clientX - canvas.offsetLeft) - whiteBall.x) * factor;\n    whiteBall.vy = ((event.clientY - canvas.offsetTop) - whiteBall.y) * factor;\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      onClick={mouseClick}\n      width=\"500\"\n      height=\"700\"\n    />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}